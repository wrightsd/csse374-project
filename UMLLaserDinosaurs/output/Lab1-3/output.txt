digraph text{
rankdir=BT;
n0 [
shape="record",
style = filled,
fillcolor =firebrick2,
label = "{problem.AppLauncher\n\<\<adapter\>\>|-watcher : java.nio.file.WatchService\l-dir : java.nio.file.Path\l-stop : boolean\l-processes : java.util.List\l-currentEventType : java.lang.String\l-currentPathString : java.lang.String\l-observers : java.util.ArrayList\l|+problem.AppLauncher(java.nio.file.Path) : void\l+run() : void\l#clearEverything() : void\l+stopGracefully() : void\l+isRunning() : boolean\l+getApplicationsCount() : int\l+handleDirectoryEvent(java.lang.String, java.nio.file.Path) : void\l+main(java.lang.String[]) : void\l+registerObserver(problem.Observer) : void\l+removeObserver(problem.Observer) : void\l+notifyObservers() : void\l+getCurrentEventType() : java.lang.String\l+getCurrentFilePathString() : java.lang.String\l+addProcesses(java.lang.Process) : void\l}"
];
n0->n1[arrowhead="onormal", style="solid"];
n0->n2[arrowhead="onormal", style="dashed"];
n3 [
shape="record",
label = "{problem.BackwardsTextPrinter|+update(problem.AppLauncher) : void\l}"
];
n3->n4[arrowhead="onormal", style="dashed"];
n5 [
shape="record",
label = "{problem.FileNamePrinter|+update(problem.AppLauncher) : void\l}"
];
n5->n4[arrowhead="onormal", style="dashed"];
n4 [
shape="record",
label = "{\<\<abstract\>\>\n\<\<interface\>\>\nproblem.Observer|+update(problem.AppLauncher) : void\l}"
];
n2 [
shape="record",
label = "{\<\<abstract\>\>\n\<\<interface\>\>\nproblem.Subject|+registerObserver(problem.Observer) : void\l+removeObserver(problem.Observer) : void\l+notifyObservers() : void\l}"
];
n6 [
shape="record",
label = "{problem.TextLoader|+update(problem.AppLauncher) : void\l}"
];
n6->n4[arrowhead="onormal", style="dashed"];
n7 [
shape="record",
label = "{problem.WebsiteLoader|+update(problem.AppLauncher) : void\l}"
];
n7->n4[arrowhead="onormal", style="dashed"];
n8 [
shape="record",
label = "{problem.WordLoader|+update(problem.AppLauncher) : void\l}"
];
n8->n4[arrowhead="onormal", style="dashed"];
n9 [
shape="record",
style = filled,
fillcolor =firebrick2,
style = filled,
fillcolor =yellow1,
label = "{\<\<abstract\>\>\n\<\<interface\>\>\njava.nio.file.Path\n\<\<adaptee\>\>\n\<\<composite component\>\>|+getFileSystem() : java.nio.file.FileSystem\l+isAbsolute() : boolean\l+getRoot() : java.nio.file.Path\l+getFileName() : java.nio.file.Path\l+getParent() : java.nio.file.Path\l+getNameCount() : int\l+getName(int) : java.nio.file.Path\l+subpath(int, int) : java.nio.file.Path\l+startsWith(java.nio.file.Path) : boolean\l+startsWith(java.lang.String) : boolean\l+endsWith(java.nio.file.Path) : boolean\l+endsWith(java.lang.String) : boolean\l+normalize() : java.nio.file.Path\l+resolve(java.nio.file.Path) : java.nio.file.Path\l+resolve(java.lang.String) : java.nio.file.Path\l+resolveSibling(java.nio.file.Path) : java.nio.file.Path\l+resolveSibling(java.lang.String) : java.nio.file.Path\l+relativize(java.nio.file.Path) : java.nio.file.Path\l+toUri() : java.net.URI\l+toAbsolutePath() : java.nio.file.Path\l+toRealPath(java.nio.file.LinkOption[]) : java.nio.file.Path\l+toFile() : java.io.File\l+register(java.nio.file.WatchService, java.nio.file.WatchEvent$Kind[], java.nio.file.WatchEvent$Modifier[]) : java.nio.file.WatchKey\l+register(java.nio.file.WatchService, java.nio.file.WatchEvent$Kind[]) : java.nio.file.WatchKey\l+iterator() : java.util.Iterator\l+compareTo(java.nio.file.Path) : int\l+equals(java.lang.Object) : boolean\l+hashCode() : int\l+toString() : java.lang.String\l+compareTo(java.lang.Object) : int\l}"
];
n9->n10[arrowhead="onormal", style="dashed"];
n9->n11[arrowhead="onormal", style="dashed"];
n9->n12[arrowhead="onormal", style="dashed"];
n1[
style = filled,
fillcolor =firebrick2,
label = "java.lang.Thread\n\<\<target\>\>"];
n10[
label = "java.lang.Comparable"];
n11[
label = "java.lang.Iterable"];
n12[
label = "java.nio.file.Watchable"];
n0->n1[arrowhead="normal", style="solid", label="\<\<adapts\>\>"];
}