digraph text{
rankdir=BT;
Calendar [
shape="record",
color =black,
label = "{\<\<abstract\>\>\nCalendar|-ERA : int\l-YEAR : int\l-MONTH : int\l-WEEK_OF_YEAR : int\l-WEEK_OF_MONTH : int\l-DATE : int\l-DAY_OF_MONTH : int\l-DAY_OF_YEAR : int\l-DAY_OF_WEEK : int\l-DAY_OF_WEEK_IN_MONTH : int\l-AM_PM : int\l-HOUR : int\l-HOUR_OF_DAY : int\l-MINUTE : int\l-SECOND : int\l-MILLISECOND : int\l-ZONE_OFFSET : int\l-DST_OFFSET : int\l-FIELD_COUNT : int\l-SUNDAY : int\l-MONDAY : int\l-TUESDAY : int\l-WEDNESDAY : int\l-THURSDAY : int\l-FRIDAY : int\l-SATURDAY : int\l-JANUARY : int\l-FEBRUARY : int\l-MARCH : int\l-APRIL : int\l-MAY : int\l-JUNE : int\l-JULY : int\l-AUGUST : int\l-SEPTEMBER : int\l-OCTOBER : int\l-NOVEMBER : int\l-DECEMBER : int\l-UNDECIMBER : int\l-AM : int\l-PM : int\l-ALL_STYLES : int\l-STANDALONE_MASK : int\l-SHORT : int\l-LONG : int\l-NARROW_FORMAT : int\l-NARROW_STANDALONE : int\l-SHORT_FORMAT : int\l-LONG_FORMAT : int\l-SHORT_STANDALONE : int\l-LONG_STANDALONE : int\l#fields : int[]\l#isSet : boolean[]\l-stamp : int[]\l#time : long\l#isTimeSet : boolean\l#areFieldsSet : boolean\l-areAllFieldsSet : boolean\l-lenient : boolean\l-zone : TimeZone\l-sharedZone : boolean\l-firstDayOfWeek : int\l-minimalDaysInFirstWeek : int\l-cachedLocaleData : ConcurrentMap\l-UNSET : int\l-COMPUTED : int\l-MINIMUM_USER_STAMP : int\l-ALL_FIELDS : int\l-nextStamp : int\l-currentSerialVersion : int\l-serialVersionOnStream : int\l-serialVersionUID : long\l-ERA_MASK : int\l-YEAR_MASK : int\l-MONTH_MASK : int\l-WEEK_OF_YEAR_MASK : int\l-WEEK_OF_MONTH_MASK : int\l-DAY_OF_MONTH_MASK : int\l-DATE_MASK : int\l-DAY_OF_YEAR_MASK : int\l-DAY_OF_WEEK_MASK : int\l-DAY_OF_WEEK_IN_MONTH_MASK : int\l-AM_PM_MASK : int\l-HOUR_MASK : int\l-HOUR_OF_DAY_MASK : int\l-MINUTE_MASK : int\l-SECOND_MASK : int\l-MILLISECOND_MASK : int\l-ZONE_OFFSET_MASK : int\l-DST_OFFSET_MASK : int\l-FIELD_NAME : String[]\l-$assertionsDisabled : boolean\l|#Calendar() : void\l#Calendar(TimeZone, Locale) : void\l+getInstance() : Calendar\l+getInstance(TimeZone) : Calendar\l+getInstance(Locale) : Calendar\l+getInstance(TimeZone, Locale) : Calendar\l-createCalendar(TimeZone, Locale) : Calendar\l+getAvailableLocales() : Locale[]\l#computeTime() : void\l#computeFields() : void\l+getTime() : Date\l+setTime(Date) : void\l+getTimeInMillis() : long\l+setTimeInMillis(long) : void\l+get(int) : int\l#internalGet(int) : int\l-internalSet(int, int) : void\l+set(int, int) : void\l+set(int, int, int) : void\l+set(int, int, int, int, int) : void\l+set(int, int, int, int, int, int) : void\l+clear() : void\l+clear(int) : void\l+isSet(int) : boolean\l+getDisplayName(int, int, Locale) : String\l+getDisplayNames(int, int, Locale) : Map\l-getDisplayNamesImpl(int, int, Locale) : Map\l-checkDisplayNameParams(int, int, int, int, Locale, int) : boolean\l-getFieldStrings(int, int, DateFormatSymbols) : String[]\l#complete() : void\l-isExternallySet(int) : boolean\l-getSetStateFields() : int\l-setFieldsComputed(int) : void\l-setFieldsNormalized(int) : void\l-isPartiallyNormalized() : boolean\l-isFullyNormalized() : boolean\l-setUnnormalized() : void\l-isFieldSet(int, int) : boolean\l-selectFields() : int\l-getBaseStyle(int) : int\l-isStandaloneStyle(int) : boolean\l-isNarrowStyle(int) : boolean\l-aggregateStamp(int, int) : int\l+getAvailableCalendarTypes() : Set\l+getCalendarType() : String\l+equals(Object) : boolean\l+hashCode() : int\l+before(Object) : boolean\l+after(Object) : boolean\l+compareTo(Calendar) : int\l+add(int, int) : void\l+roll(int, boolean) : void\l+roll(int, int) : void\l+setTimeZone(TimeZone) : void\l+getTimeZone() : TimeZone\l-getZone() : TimeZone\l-setZoneShared(boolean) : void\l+setLenient(boolean) : void\l+isLenient() : boolean\l+setFirstDayOfWeek(int) : void\l+getFirstDayOfWeek() : int\l+setMinimalDaysInFirstWeek(int) : void\l+getMinimalDaysInFirstWeek() : int\l+isWeekDateSupported() : boolean\l+getWeekYear() : int\l+setWeekDate(int, int, int) : void\l+getWeeksInWeekYear() : int\l+getMinimum(int) : int\l+getMaximum(int) : int\l+getGreatestMinimum(int) : int\l+getLeastMaximum(int) : int\l+getActualMinimum(int) : int\l+getActualMaximum(int) : int\l+clone() : Object\l-getFieldName(int) : String\l+toString() : String\l-appendValue(StringBuilder, String, boolean, long) : void\l-setWeekCountData(Locale) : void\l-updateTime() : void\l-compareTo(long) : int\l-getMillisOf(Calendar) : long\l-adjustStamp() : void\l-invalidateWeekFields() : void\l-writeObject(ObjectOutputStream) : void\l-readObject(ObjectInputStream) : void\l+toInstant() : Instant\l+compareTo(Object) : int\l}"
];
Calendar->Serializable[arrowhead="onormal", style="dashed"];
Calendar->Cloneable[arrowhead="onormal", style="dashed"];
Calendar->Comparable[arrowhead="onormal", style="dashed"];
Runtime [
shape="record",
color =blue,
label = "{Runtime\n\<\<Singleton\>\>|-currentRuntime : Runtime\l|+getRuntime() : Runtime\l-Runtime() : void\l+exit(int) : void\l+addShutdownHook(Thread) : void\l+removeShutdownHook(Thread) : boolean\l+halt(int) : void\l+runFinalizersOnExit(boolean) : void\l+exec(String) : Process\l+exec(String, String[]) : Process\l+exec(String, String[], File) : Process\l+exec(String[]) : Process\l+exec(String[], String[]) : Process\l+exec(String[], String[], File) : Process\l+availableProcessors() : int\l+freeMemory() : long\l+totalMemory() : long\l+maxMemory() : long\l+gc() : void\l-runFinalization0() : void\l+runFinalization() : void\l+traceInstructions(boolean) : void\l+traceMethodCalls(boolean) : void\l+load(String) : void\l-load0(Class, String) : void\l+loadLibrary(String) : void\l-loadLibrary0(Class, String) : void\l+getLocalizedInputStream(InputStream) : InputStream\l+getLocalizedOutputStream(OutputStream) : OutputStream\l}"
];
Desktop [
shape="record",
color =black,
label = "{Desktop|-peer : DesktopPeer\l|-Desktop() : void\l+getDesktop() : Desktop\l+isDesktopSupported() : boolean\l+isSupported(Desktop$Action) : boolean\l-checkFileValidation(File) : void\l-checkActionSupport(Desktop$Action) : void\l-checkAWTPermission() : void\l+open(File) : void\l+edit(File) : void\l+print(File) : void\l+browse(URI) : void\l+mail() : void\l+mail(URI) : void\l-checkExec() : void\l}"
];
FilterInputStream [
shape="record",
color =black,
label = "{FilterInputStream|-in : InputStream\l|#FilterInputStream(InputStream) : void\l+read() : int\l+read(byte[]) : int\l+read(byte[], int, int) : int\l+skip(long) : long\l+available() : int\l+close() : void\l+mark(int) : void\l+reset() : void\l+markSupported() : boolean\l}"
];
FilterInputStream->InputStream[arrowhead="onormal", style="solid"];
EagerSingletonSample [
shape="record",
color =blue,
label = "{EagerSingletonSample\n\<\<Singleton\>\>|-s : EagerSingletonSample\l|+getInstance() : EagerSingletonSample\l}"
];
LazySingletonSample [
shape="record",
color =blue,
label = "{LazySingletonSample\n\<\<Singleton\>\>|-s : LazySingletonSample\l|+getInstance() : LazySingletonSample\l}"
];
Calendar->Calendar[arrowhead="ovee", style="dashed"];
Runtime->Runtime[arrowhead="ovee", style="dashed"];
Desktop->Desktop[arrowhead="ovee", style="dashed"];
EagerSingletonSample->EagerSingletonSample[arrowhead="ovee", style="dashed"];
LazySingletonSample->LazySingletonSample[arrowhead="ovee", style="dashed"];
Calendar->Locale[arrowhead="ovee", style="solid"];
Calendar->String[arrowhead="ovee", style="solid"];
}